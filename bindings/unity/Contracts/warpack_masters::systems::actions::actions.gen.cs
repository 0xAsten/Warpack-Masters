// Generated by dojo-bindgen on Sat, 6 Apr 2024 07:50:28 +0000. Do not modify this file manually.
using System;
using System.Threading.Tasks;
using Dojo;
using Dojo.Starknet;
using UnityEngine;
using dojo_bindings;

// System definitions for `warpack_masters::systems::actions::actions` contract
public class Actions : MonoBehaviour {
    // The address of this contract
    public string contractAddress;

    
    // Call the `spawn` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> Spawn(Account account, FieldElement name, Class class) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "spawn",
                calldata = new dojo.FieldElement[] {
                    new FieldElement(name).Inner(),
                new FieldElement(class).Inner()
                }
            }
        });
    }
            

    
    // Call the `place_item` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> PlaceItem(Account account, uint char_item_counter_id, uint x, uint y, uint rotation) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "place_item",
                calldata = new dojo.FieldElement[] {
                    new FieldElement(char_item_counter_id).Inner(),
                new FieldElement(x).Inner(),
                new FieldElement(y).Inner(),
                new FieldElement(rotation).Inner()
                }
            }
        });
    }
            

    
    // Call the `undo_place_item` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> UndoPlaceItem(Account account, uint char_item_counter_id) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "undo_place_item",
                calldata = new dojo.FieldElement[] {
                    new FieldElement(char_item_counter_id).Inner()
                }
            }
        });
    }
            

    
    // Call the `add_item` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> AddItem(Account account, FieldElement name, uint width, uint height, uint price, uint damage, uint armor, uint chance, uint cooldown, uint heal, uint rarity) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "add_item",
                calldata = new dojo.FieldElement[] {
                    new FieldElement(name).Inner(),
                new FieldElement(width).Inner(),
                new FieldElement(height).Inner(),
                new FieldElement(price).Inner(),
                new FieldElement(damage).Inner(),
                new FieldElement(armor).Inner(),
                new FieldElement(chance).Inner(),
                new FieldElement(cooldown).Inner(),
                new FieldElement(heal).Inner(),
                new FieldElement(rarity).Inner()
                }
            }
        });
    }
            

    
    // Call the `edit_item` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> EditItem(Account account, uint item_id, FieldElement item_key, FieldElement item_value) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "edit_item",
                calldata = new dojo.FieldElement[] {
                    new FieldElement(item_id).Inner(),
                new FieldElement(item_key).Inner(),
                new FieldElement(item_value).Inner()
                }
            }
        });
    }
            

    
    // Call the `buy_item` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> BuyItem(Account account, uint item_id) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "buy_item",
                calldata = new dojo.FieldElement[] {
                    new FieldElement(item_id).Inner()
                }
            }
        });
    }
            

    
    // Call the `sell_item` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> SellItem(Account account, uint char_item_counter_id) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "sell_item",
                calldata = new dojo.FieldElement[] {
                    new FieldElement(char_item_counter_id).Inner()
                }
            }
        });
    }
            

    
    // Call the `is_world_owner` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> IsWorldOwner(Account account, FieldElement caller) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "is_world_owner",
                calldata = new dojo.FieldElement[] {
                    new FieldElement(caller).Inner()
                }
            }
        });
    }
            

    
    // Call the `is_item_owned` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> IsItemOwned(Account account, FieldElement caller, uint id) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "is_item_owned",
                calldata = new dojo.FieldElement[] {
                    new FieldElement(caller).Inner(),
                new FieldElement(id).Inner()
                }
            }
        });
    }
            

    
    // Call the `reroll_shop` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> RerollShop(Account account) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "reroll_shop",
                calldata = new dojo.FieldElement[] {
                    
                }
            }
        });
    }
            

    
    // Call the `fight` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> Fight(Account account) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "fight",
                calldata = new dojo.FieldElement[] {
                    
                }
            }
        });
    }
            

    
    // Call the `dojo_resource` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> DojoResource(Account account) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "dojo_resource",
                calldata = new dojo.FieldElement[] {
                    
                }
            }
        });
    }
            
}
        
